{% for Scalar in types.based.Numeric|!protocol %}
{% for Matrix in types.implementing.MatrixProtocol|struct %}
// sourcery:file:Generated/Equality{{ Matrix.name }}{{ Scalar.name }}Tests
import XCTest

@testable import Keanu

// Matrix type: {{ Matrix.name }}
// Scalar type: {{ Scalar.name }}
final class Equality{{ Matrix.name }}{{ Scalar.name }}Tests: XCTestCase {
    func testEmptyEqual() {
        let m1 = [[]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let m2 = [[]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertEqual(m1, m2)
    }

    func testSingleEqual() {
        let m1 = [[1]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let m2 = [[1]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertEqual(m1, m2)
    }

    func testNormalEqual() {
        let m1 = [[1, 2, 3], [4, 5, 6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let m2 = [[1, 2, 3], [4, 5, 6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertEqual(m1, m2)
    }

    func testSameSizeNotEqual() {
        let m1 = [[1, 2, 3], [4, 5, 6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let m2 = [[4, 5, 6], [1, 2, 3]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertNotEqual(m1, m2)
    }

    func testSameCountNotEqual() {
        let m1 = [[1, 2, 3, 4, 5, 6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let m2 = [[1, 2, 3], [4, 5, 6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertNotEqual(m1, m2)
    }

    func testDifferentCountNotEqual() {
        let m1 = [[]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let m2 = [[1]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertNotEqual(m1, m2)
    }

{% if Matrix|implements: "ContiguousMatrixProtocol" %}
    func testDifferentOrderEqual() {
        let m1 = {{ Matrix.name }}<{{ Scalar.name }}>([[1, 2, 3], [4, 5, 6]], order: .rowMajor)
        let m2 = {{ Matrix.name }}<{{ Scalar.name }}>([[1, 2, 3], [4, 5, 6]], order: .columnMajor)
        XCTAssertEqual(m1, m2)
    }

    func testDifferentOrderNotEqual() {
        let m1 = {{ Matrix.name }}<{{ Scalar.name }}>([[4, 5, 6], [4, 5, 6]], order: .rowMajor)
        let m2 = {{ Matrix.name }}<{{ Scalar.name }}>([[1, 2, 3], [4, 5, 6]], order: .columnMajor)
        XCTAssertNotEqual(m1, m2)
    }

    func testTransposedNotEqual() {
        let m1 = {{ Matrix.name }}<{{ Scalar.name }}>([[1, 2, 3], [4, 5, 6]], sourceOrder: .rowMajor, order: .rowMajor)
        let m2 = {{ Matrix.name }}<{{ Scalar.name }}>(
            [[1, 2, 3], [4, 5, 6]],
            sourceOrder: .columnMajor,
            order: .columnMajor
        )
        XCTAssertNotEqual(m1, m2)
    }
{% endif %}
}
// sourcery:end

{% endfor %}
{% endfor %}
