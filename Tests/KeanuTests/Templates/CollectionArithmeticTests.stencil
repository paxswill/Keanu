{% for Scalar in types.based.Numeric|!protocol %}
// sourcery:file:Generated/Collection{{ Scalar.name }}ArithmeticTests
import XCTest

@testable import Keanu

// Scalar type: {{ Scalar.name }}

final class Collection{{ Scalar.name }}ArithmeticTests: XCTestCase {
    func testVectorVectorAddition() {
        let a = [1, 2, 3] as [{{ Scalar.name }}]
        let b = [4, 5, 6] as [{{ Scalar.name }}]
        let expected = [5, 7, 9] as [{{ Scalar.name }}]
        XCTAssertEqual(a .+ b, expected)
    }

    func testVectorScalarAddition() {
        let vector = [2, 4, 6] as [{{ Scalar.name }}]
        let scalar = 2 as {{ Scalar.name }}
        let expected = [4, 6, 8] as [{{ Scalar.name }}]
        XCTAssertEqual(vector .+ scalar, expected)
        XCTAssertEqual(scalar .+ vector, expected)
    }

    func testVectorVectorSubtraction() {
        let a = [2, 4, 6] as [{{ Scalar.name }}]
        let b = [1, 3, 5] as [{{ Scalar.name }}]
        let expected = [1, 1, 1] as [{{ Scalar.name }}]
        XCTAssertEqual(a .- b, expected)
    }

    func testVectorScalarSubtraction() {
        let vector = [2, 4, 6] as [{{ Scalar.name }}]
        let scalar = 1 as {{ Scalar.name }}
        let expected = [1, 3, 5] as [{{ Scalar.name }}]
        XCTAssertEqual(vector .- scalar, expected)
    }

    func testVectorVectorMultiplcation() {
        let a = [1, 2, 3] as [{{ Scalar.name }}]
        let b = [4, 5, 6] as [{{ Scalar.name }}]
        let expected = [4, 10, 18] as [{{ Scalar.name }}]
        XCTAssertEqual(a .* b, expected)
    }

    func testVectorScalarMultiplication() {
        let vector = [1, 2, 3] as [{{ Scalar.name }}]
        let scalar = 2 as {{ Scalar.name }}
        let expected = [2, 4, 6] as [{{ Scalar.name }}]
        XCTAssertEqual(vector .* scalar, expected)
        XCTAssertEqual(scalar .* vector, expected)
    }
}
// sourcery:end
{% endfor %}
