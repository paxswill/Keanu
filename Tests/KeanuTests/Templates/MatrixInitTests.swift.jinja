{% extends "base-matrix-scalar.jinja" %}

{% block base_name %}Init{% endblock %}

{% block test_contents %}
func testRepeatingInit() {
    let numRows = 2
    let numCols = 7
    let value = 1 as Element
    let matrix = TestMatrix(rows: numRows, columns: numCols, initialValue: value)
    XCTAssertEqual(matrix.count, numCols * numRows)
    XCTAssertEqual(matrix.rowCount, numRows)
    XCTAssertEqual(matrix.columnCount, numCols)
    XCTAssert(matrix.allSatisfy { value == $0 })
}

func testZeroInit() {
    let numRows = 2
    let numCols = 7
    let matrix = TestMatrix(rows: numRows, columns: numCols)
    XCTAssertEqual(matrix.count, numCols * numRows)
    XCTAssertEqual(matrix.rowCount, numRows)
    XCTAssertEqual(matrix.columnCount, numCols)
    XCTAssert(matrix.allSatisfy { $0 == {{ Scalar.name}}.zero })
}

func testNestedArrayInit() {
    let matrix = TestMatrix([[0, 1, 2], [3, 4, 5]])
    XCTAssertEqual(Array(matrix), [0, 1, 2, 3, 4, 5] as [Element])
    XCTAssertEqual(matrix.rowCount, 2)
    XCTAssertEqual(matrix.columnCount, 3)
}

func testArrayLiteral() {
    let matrix = [[1, 2], [3, 4], [5, 6]] as TestMatrix
    XCTAssertEqual(Array(matrix), [1, 2, 3, 4, 5, 6] as [Element])
    XCTAssertEqual(matrix.rowCount, 3)
    XCTAssertEqual(matrix.columnCount, 2)
}

func testMatrixCopy() {
    var original = [[1, 2, 3], [4, 5, 6]] as TestMatrix
    let copied = TestMatrix(fromMatrix: original)
    XCTAssertEqual(original, copied)
    // Modify the original, and make sure the copy didn't change
    original[0, 0] = 10
    XCTAssertNotEqual(original, copied)
}

{% if Matrix.contiguous %}
func testTransposeArrayInitColumnMajor() {
    let matrix = TestMatrix(
        [[2, 4, 6], [8, 10, 12]],
        sourceOrder: .rowMajor,
        order: .columnMajor
    )
    XCTAssertEqual(Array(matrix), [2, 4, 6, 8, 10, 12] as [Element])
    XCTAssertEqual(matrix.rowCount, 2)
    XCTAssertEqual(matrix.columnCount, 3)
}

func testTransposeArrayInitRowMajor() {
    let matrix = TestMatrix(
        [[1, 2, 3], [2, 4, 6]],
        sourceOrder: .columnMajor,
        order: .rowMajor
    )
    XCTAssertEqual(Array(matrix), [1, 2, 2, 4, 3, 6] as [Element])
    XCTAssertEqual(matrix.rowCount, 3)
    XCTAssertEqual(matrix.columnCount, 2)
}
{% endif %}
{% endblock %}