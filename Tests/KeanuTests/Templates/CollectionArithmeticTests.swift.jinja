{% extends "base-scalar.jinja" %}

{% block base_name %}CollectionArithmetic{% endblock %}

{% block test_contents %}
func testVectorVectorAddition() {
    let a = [1, 2, 3] as [Element]
    let b = [4, 5, 6] as [Element]
    let expected = [5, 7, 9] as [Element]
    XCTAssertEqual(a .+ b, expected)
}

func testVectorScalarAddition() {
    let vector = [2, 4, 6] as [Element]
    let scalar = 2 as Element
    let expected = [4, 6, 8] as [Element]
    XCTAssertEqual(vector .+ scalar, expected)
    XCTAssertEqual(scalar .+ vector, expected)
}

func testVectorVectorSubtraction() {
    let a = [2, 4, 6] as [Element]
    let b = [1, 3, 5] as [Element]
    let expected = [1, 1, 1] as [Element]
    XCTAssertEqual(a .- b, expected)
}

func testVectorScalarSubtraction() {
    let vector = [2, 4, 6] as [Element]
    let scalar = 1 as Element
    let expected = [1, 3, 5] as [Element]
    XCTAssertEqual(vector .- scalar, expected)
}

func testVectorVectorMultiplcation() {
    let a = [1, 2, 3] as [Element]
    let b = [4, 5, 6] as [Element]
    let expected = [4, 10, 18] as [Element]
    XCTAssertEqual(a .* b, expected)
}

func testVectorScalarMultiplication() {
    let vector = [1, 2, 3] as [Element]
    let scalar = 2 as Element
    let expected = [2, 4, 6] as [Element]
    XCTAssertEqual(vector .* scalar, expected)
    XCTAssertEqual(scalar .* vector, expected)
}
{% endblock %}
