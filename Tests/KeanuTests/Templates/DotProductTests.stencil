{% for Scalar in types.based.Numeric|!protocol %}
{% for Matrix in types.implementing.MatrixProtocol|struct %}
// sourcery:file:Generated/DotProduct{{ Matrix.name }}{{ Scalar.name }}Tests
import XCTest

@testable import Keanu

// Matrix type: {{ Matrix.name }}
// Scalar type: {{ Scalar.name }}
final class DotProduct{{ Matrix.name }}{{ Scalar.name }}Tests: XCTestCase {
    func testDotSingle() {
        let lhs = [[1]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let rhs = [[10]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let dot = lhs.dot(rhs)
        XCTAssertEqual(dot, 10 as {{ Scalar.name }})
    }

    func testDotThree() {
        let rhs = [[1, 2, 3]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let lhs = [[4, 5, 6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let dot = lhs.dot(rhs)
        XCTAssertEqual(dot, 32 as {{ Scalar.name }})
    }

    func testRowColumnVectors() {
        let lhs = [[1], [2], [3]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let rhs = [[4, 5, 6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let dot = lhs.dot(rhs)
        XCTAssertEqual(dot, 32 as {{ Scalar.name }})
    }

    func testRowViewColumn() {
        let lhs = [[1], [2], [3]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let rhs = [[4, 5, 6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let dot = lhs.dot(rhs.row(0))
        XCTAssertEqual(dot, 32 as {{ Scalar.name }})
    }

    func testMatrixArray() {
        let lhs = [[1], [2], [3]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let rhs = [4, 5, 6] as [{{ Scalar.name }}]
        let dot = lhs.dot(rhs)
        XCTAssertEqual(dot, 32 as {{ Scalar.name }})
    }
}

final class ViewDotProduct{{ Matrix.name }}{{ Scalar.name }}Tests: XCTestCase {
    func testDotSingleRow() {
        let lhs = [[1]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let rhs = [[10]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let dot = lhs.row(0).dot(rhs.row(0))
        XCTAssertEqual(dot, 10 as {{ Scalar.name }})
    }

    func testDotSingleColumn() {
        let lhs = [[1]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let rhs = [[10]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let dot = lhs.column(0).dot(rhs.column(0))
        XCTAssertEqual(dot, 10 as {{ Scalar.name }})
    }

    func testDotSingleRowColumn() {
        let lhs = [[1]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let rhs = [[10]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let dot = lhs.row(0).dot(rhs.column(0))
        XCTAssertEqual(dot, 10 as {{ Scalar.name }})
    }

    func testDotThreeRow() {
        let rhs = [[1, 2, 3]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let lhs = [[4, 5, 6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let dot = lhs.row(0).dot(rhs.row(0))
        XCTAssertEqual(dot, 32 as {{ Scalar.name }})
    }

    func testDotThreeColumn() {
        let rhs = [[1], [2], [3]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let lhs = [[4], [5], [6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let dot = lhs.column(0).dot(rhs.column(0))
        XCTAssertEqual(dot, 32 as {{ Scalar.name }})
    }

    func testDotThreeRowColumn() {
        let lhs = [[1, 2, 3]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let rhs = [[4], [5], [6]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let dot = lhs.row(0).dot(rhs.column(0))
        XCTAssertEqual(dot, 32 as {{ Scalar.name }})
    }
}
// sourcery:end

{% endfor %}
{% endfor %}
