{% for Scalar in types.based.Numeric|!protocol %}
{% for Matrix in types.implementing.MatrixProtocol|struct %}
// sourcery:file:Generated/{{ Matrix.name }}{{ Scalar.name }}ArithmeticTests
import XCTest

@testable import Keanu

// Matrix type: {{ Matrix.name }}
// Scalar type: {{ Scalar.name }}
final class {{ Matrix.name }}{{ Scalar.name }}ArithmeticTests: XCTestCase {
    func testMatrixMatrixAddition() {
        let a = [[1, 2], [3, 4]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let b = [[5, 6], [7, 8]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let expected = [[6, 8], [10, 12]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertEqual(a .+ b, expected)
    }

    func testMatrixScalarAddition() {
        let matrix = [[2, 4], [6, 8]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let scalar = 1 as {{ Scalar.name }}
        let expected = [[3, 5], [7, 9]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertEqual(matrix .+ scalar, expected)
        XCTAssertEqual(scalar .+ matrix, expected)
    }

    func testMatrixMatrixSubtraction() {
        let a = [[5, 6], [7, 8]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let b = [[1, 2], [3, 4]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let expected = [[4, 4], [4, 4]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertEqual(a .- b, expected)
    }

    func testMatrixScalarSubtraction() {
        let matrix = [[2, 4], [6, 8]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let scalar = 1 as {{ Scalar.name }}
        let expected = [[1, 3], [5, 7]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertEqual(matrix .- scalar, expected)
    }

    func testMatrixElementMultiplication() {
        let a = [[1, 3], [5, 7]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let b = [[2, 4], [6, 8]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let expected = [[2, 12], [30, 56]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertEqual(a .* b, expected)
    }

    func testMatrixScalarMultiplication() {
        let matrix = [[1, 2], [3, 4]] as {{ Matrix.name }}<{{ Scalar.name }}>
        let scalar = 2 as {{ Scalar.name }}
        let expected = [[2, 4], [6, 8]] as {{ Matrix.name }}<{{ Scalar.name }}>
        XCTAssertEqual(matrix .* scalar, expected)
        XCTAssertEqual(scalar .* matrix, expected)
    }
}
// sourcery:end

{% endfor %}
{% endfor %}
