{% extends "base-matrix-scalar.jinja" %}

{% block base_name %}HashTests{% endblock %}

{% block test_contents %}
func testEmptyHash() {
    let m1 = [[]] as TestMatrix
    let m2 = [[]] as TestMatrix
    XCTAssertEqual(hashOf(m1), hashOf(m2))
}

func testDifferentSizes() {
    let m1 = [[1, 2], [3, 4], [5, 6]] as TestMatrix
    let m2 = [[1, 2, 3], [4, 5, 6]] as TestMatrix
    XCTAssertNotEqual(hashOf(m1), hashOf(m2))
}

func testSingleEqual() {
    let m1 = [[1]] as TestMatrix
    let m2 = [[1]] as TestMatrix
    XCTAssertEqual(m1, m2)
}

func testTransposedNotEqual() {
    let rowVector = [[1, 2, 3, 4, 5]] as TestMatrix
    let columnVector = [[1], [2], [3], [4], [5]] as TestMatrix
    XCTAssertNotEqual(hashOf(rowVector), hashOf(columnVector))
}

{% if Matrix.contiguous %}
func testDifferentOrderEqual() {
    let m1 = TestMatrix([[1, 2, 3], [4, 5, 6]], order: .rowMajor)
    let m2 = TestMatrix([[1, 2, 3], [4, 5, 6]], order: .columnMajor)
    XCTAssertEqual(hashOf(m1), hashOf(m2))
}

func testDifferentOrderNotEqual() {
    let m1 = TestMatrix([[4, 5, 6], [4, 5, 6]], order: .rowMajor)
    let m2 = TestMatrix([[1, 2, 3], [4, 5, 6]], order: .columnMajor)
    XCTAssertNotEqual(hashOf(m1), hashOf(m2))
}

func testTransposedOrderNotEqual() {
    let m1 = TestMatrix([[1, 2, 3], [4, 5, 6]], sourceOrder: .rowMajor, order: .rowMajor)
    let m2 = TestMatrix(
        [[1, 2, 3], [4, 5, 6]],
        sourceOrder: .columnMajor,
        order: .columnMajor
    )
    XCTAssertNotEqual(hashOf(m1), hashOf(m2))
}
{% endif %}

func testRowHashEqual() {
    let m = [[1, 2, 3], [1, 2, 3]] as TestMatrix
    XCTAssertEqual(hashOf(m.row(0)), hashOf(m.row(1)))
}

func testRowHashNotEqual() {
    let m = [[1, 2, 3], [4, 5, 6]] as TestMatrix
    XCTAssertNotEqual(hashOf(m.row(0)), hashOf(m.row(1)))
}

func testColumnHashEqual() {
    let m = [[1, 2, 1], [3, 5, 3], [1, 2, 1]] as TestMatrix
    XCTAssertEqual(hashOf(m.column(0)), hashOf(m.column(2)))
}

func testColumnHashNotEqual() {
    let m = [[1, 2, 1], [3, 5, 3], [1, 2, 1]] as TestMatrix
    XCTAssertNotEqual(hashOf(m.column(0)), hashOf(m.column(1)))
}

// While we can't compare them to each other (at least not yet), row and
// column views will hash to the same value if they have the same element
// values.
func testRowColumnHashEqual() {
    let size = 5
    let m = TestMatrix.identityMatrix(size: size)
    for index in 0..<size {
        XCTAssertEqual(hashOf(m.row(index)), hashOf(m.column(index)))
    }
}
{% endblock %}